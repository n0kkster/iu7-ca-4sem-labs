from typing import Callable  # Импорт типа Callable для аннотации функции

def SympsonIntegral(x: list[float | int], f: Callable) -> float:
    """
    Вычисляет определённый интеграл функции f на отрезке, заданном узлами x,
    используя метод Симпсона (квадратурную формулу).

    Args:
        x (list[float | int]): Список узлов (точек) на отрезке интегрирования.
                               Должны быть отсортированы в порядке возрастания.
        f (Callable): Функция, которую нужно проинтегрировать.
                      Принимает один числовой аргумент и возвращает число.

    Returns:
        float: Приближённое значение интеграла функции f на отрезке [x[0], x[-1]].
    """
    
    def symfunc(a: float, b: float) -> float:
        return ((b - a) / 6) * (f(a) + 4 * f((a + b) / 2) + f(b))

    # Суммируем значения интегралов на всех подотрезках [x[i], x[i+1]]
    # Проходим по парам соседних узлов и применяем формулу Симпсона
    return sum([symfunc(x[i], x[i + 1]) for i in range(len(x) - 1)])