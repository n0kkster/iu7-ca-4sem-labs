def Gauss(A: list[list[float]], B: list[float]) -> list[float]:
    """
    Решает систему линейных уравнений Ax = B методом Гаусса с выбором ведущего элемента.

    Args:
        A (list[list[float]]): Матрица коэффициентов системы (квадратная матрица n x n).
        B (list[float]): Вектор правой части системы (длина n).

    Returns:
        list[float]: Вектор решения x (длина n).

    Raises:
        ValueError: Если размеры матрицы A и вектора B не соответствуют.
        ZeroDivisionError: Если на диагонали встречается нулевой элемент (не реализовано в данном коде).
    """
    # Проверка соответствия размеров матрицы A и вектора B
    n = len(A)
    if n != len(B):
        raise ValueError("Матрица и вектор правой части должны иметь одинаковую длину")

    # Прямой ход метода Гаусса (приведение к верхнетреугольной форме)
    for i in range(n):
        # Предполагается, что A[i][i] ≠ 0 (ведущий элемент)
        for j in range(i + 1, n):
            # Вычисление коэффициента для обнуления элемента A[j][i]
            coeff = -(A[j][i] / A[i][i])
            # Обновление строки j матрицы A
            for k in range(i, n):
                A[j][k] += coeff * A[i][k]
            # Обновление соответствующего элемента вектора B
            B[j] += coeff * B[i]

    # Обратный ход метода Гаусса (приведение к диагональной форме)
    for i in range(n - 1, -1, -1):
        for j in range(i - 1, -1, -1):
            # Вычисление коэффициента для обнуления элемента A[j][i]
            coeff = -(A[j][i] / A[i][i])
            # Обнуление элемента A[j][i]
            A[j][i] += coeff * A[i][i]
            # Обновление соответствующего элемента вектора B
            B[j] += coeff * B[i]

    # Вычисление решения: x[i] = B[i] / A[i][i]
    res = [B[i] / A[i][i] for i in range(n)]
    return res